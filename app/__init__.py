from flask import Flask
from flask_login import LoginManager
from flask_migrate import Migrate

from .law_system import init_law_system, execute_laws_for_action
from .models import db, User

login_manager = LoginManager()
migrate = Migrate()


def register_law_hooks(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤ –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    @app.before_request
    def before_request():
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        pass

    @app.after_request
    def after_request(response):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫—É
        return response

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤
    def trigger_laws(user_id, action, data=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–∫–æ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            results = execute_laws_for_action(app, user_id, action, data)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for result in results:
                if result['success'] and result['result']:
                    law_result = result['result']

                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    from .models import LawExecution
                    execution = LawExecution(
                        law_id=result['law_id'],
                        user_id=user_id,
                        action=action,
                        trigger_type='action',
                        success=True,
                        result=law_result,
                        completed_at=db.func.now()
                    )
                    db.session.add(execution)

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–æ–Ω–∞
                    from .models import Law
                    law = Law.query.get(result['law_id'])
                    if law:
                        law.execution_count += 1
                        law.last_executed = db.func.now()

                    try:
                        db.session.commit()
                    except:
                        db.session.rollback()

            return results

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–æ–Ω–æ–≤: {e}")
            return []

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.trigger_laws = trigger_laws


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Jinja2
def register_template_functions(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤"""

    @app.template_global()
    def get_law_status(law_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–æ–Ω–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤"""
        if hasattr(app, 'law_manager'):
            return app.law_manager.get_law_status(law_id)
        return {'active': False, 'metadata': {}}

    @app.template_filter()
    def format_law_result(result):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–∫–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not result:
            return "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"

        action = result.get('action', 'unknown')

        if action == 'allow':
            return "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ"
        elif action == 'deny':
            reason = result.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')
            return f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {reason}"
        elif action == 'info':
            message = result.get('message', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            return f"‚ÑπÔ∏è {message}"
        elif action == 'modify':
            return "üîÑ –ò–∑–º–µ–Ω–µ–Ω–æ"
        else:
            return f"‚ùì {action}"

    @app.template_filter()
    def law_trigger_description(triggers):
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∑–∞–∫–æ–Ω–∞"""
        if not triggers:
            return "–ù–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"

        descriptions = []
        for trigger in triggers:
            if trigger['type'] == 'action':
                actions = ', '.join(trigger.get('actions', []))
                descriptions.append(f"–ü—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö: {actions}")
            elif trigger['type'] == 'time':
                schedule = trigger.get('schedule', '')
                if schedule == 'daily':
                    descriptions.append("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ")
                elif schedule == 'weekly':
                    descriptions.append("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")
                elif schedule == 'monthly':
                    descriptions.append("–ï–∂–µ–º–µ—Å—è—á–Ω–æ")

        return "; ".join(descriptions) if descriptions else "–ù–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"


# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–∫–æ–Ω–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
def create_default_templates(app):
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∑–∞–∫–æ–Ω–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""

    with app.app_context():
        from .models import LawTemplate

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —à–∞–±–ª–æ–Ω—ã
        if LawTemplate.query.count() > 0:
            return

        templates = [
            {
                'name': '–ó–∞–∫–æ–Ω –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏',
                'description': '–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏',
                'category': 'voting',
                'code_template': '''def apply():
    """
    {description}
    """
    user = api.get_user()

    if context.action == 'vote':
        if not user or not user['{required_field}']:
            api.log_action("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
            return {
                'action': 'deny',
                'reason': '{deny_reason}'
            }

    return {'action': 'allow'}''',
                'parameters': [
                    {'name': 'description', 'type': 'text', 'default': '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ',
                     'description': '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞'},
                    {'name': 'required_field', 'type': 'select', 'options': ['party_id', 'admin'],
                     'default': 'party_id', 'description': '–¢—Ä–µ–±—É–µ–º–æ–µ –ø–æ–ª–µ'},
                    {'name': 'deny_reason', 'type': 'text', 'default': '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è',
                     'description': '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞'}
                ]
            },
            {
                'name': '–ó–∞–∫–æ–Ω –æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                'description': '–¢—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π',
                'category': 'membership',
                'code_template': '''def apply():
    """
    {description}
    """
    if context.action == '{target_action}':
        participants = context.data.get('{participants_field}', [])

        if len(participants) < {min_count}:
            api.log_action("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ", f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
            return {
                'action': 'deny',
                'reason': f'–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {min_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
            }

    return {'action': 'allow'}''',
                'parameters': [
                    {'name': 'description', 'type': 'text', 'default': '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                     'description': '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞'},
                    {'name': 'target_action', 'type': 'text', 'default': 'create_party',
                     'description': '–¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'},
                    {'name': 'participants_field', 'type': 'text', 'default': 'founding_members',
                     'description': '–ü–æ–ª–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏'},
                    {'name': 'min_count', 'type': 'number', 'default': 3, 'description': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'}
                ]
            },
            {
                'name': '–ó–∞–∫–æ–Ω –æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö',
                'description': '–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏',
                'category': 'time',
                'code_template': '''def apply():
    """
    {description}
    """
    from datetime import datetime, timedelta

    if context.action == '{target_action}':
        user = api.get_user()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        api.log_action("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username']}")

        return {
            'action': 'info',
            'message': '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã'
        }

    return {'action': 'no_action'}''',
                'parameters': [
                    {'name': 'description', 'type': 'text', 'default': '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
                     'description': '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞'},
                    {'name': 'target_action', 'type': 'text', 'default': 'vote', 'description': '–¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'},
                    {'name': 'time_limit', 'type': 'number', 'default': 24,
                     'description': '–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ —á–∞—Å–∞—Ö'}
                ]
            }
        ]

        for template_data in templates:
            template = LawTemplate(
                name=template_data['name'],
                description=template_data['description'],
                category=template_data['category'],
                code_template=template_data['code_template'],
                parameters=template_data['parameters']
            )
            db.session.add(template)

        try:
            db.session.commit()
            print("–°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∑–∞–∫–æ–Ω–æ–≤")
        except Exception as e:
            db.session.rollback()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
def init_additional_components(app):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    register_template_functions(app)

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    with app.app_context():
        create_default_templates(app)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤
    # (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å APScheduler –∏–ª–∏ Celery)
    init_scheduler(app)


def init_scheduler(app):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–≤"""

    try:
        from apscheduler.schedulers.background import BackgroundScheduler
        from apscheduler.triggers.cron import CronTrigger

        scheduler = BackgroundScheduler()

        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–æ–Ω–æ–≤
        scheduler.add_job(
            func=lambda: daily_law_check(app),
            trigger=CronTrigger(hour=0, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å
            id='daily_law_check'
        )

        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        scheduler.add_job(
            func=lambda: weekly_law_check(app),
            trigger=CronTrigger(day_of_week=0, hour=0, minute=0),  # –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            id='weekly_law_check'
        )

        scheduler.start()
        app.scheduler = scheduler

        print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–∫–æ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω")

    except ImportError:
        print("APScheduler –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–æ–Ω—ã –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install apscheduler")


def daily_law_check(app):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–≤"""

    with app.app_context():
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–∫–æ–Ω—ã —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
            results = execute_laws_for_action(app, user_id=None, action='time_check', data={'schedule': 'daily'})

            from .models import LawExecution, Law

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in results:
                execution = LawExecution(
                    law_id=result['law_id'],
                    user_id=None,
                    action='time_check',
                    trigger_type='scheduled_daily',
                    success=result['success'],
                    result=result.get('result'),
                    error_message=result.get('error'),
                    completed_at=db.func.now()
                )
                db.session.add(execution)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–æ–Ω–∞
                law = Law.query.get(result['law_id'])
                if law:
                    law.execution_count += 1
                    law.last_executed = db.func.now()

            db.session.commit()
            print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–æ–Ω–æ–≤. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–æ–Ω–æ–≤: {e}")
            db.session.rollback()


def weekly_law_check(app):
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–≤"""

    with app.app_context():
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–∫–æ–Ω—ã —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
            results = execute_laws_for_action(app, user_id=None, action='time_check', data={'schedule': 'weekly'})

            from .models import LawExecution, Law

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in results:
                execution = LawExecution(
                    law_id=result['law_id'],
                    user_id=None,
                    action='time_check',
                    trigger_type='scheduled_weekly',
                    success=result['success'],
                    result=result.get('result'),
                    error_message=result.get('error'),
                    completed_at=db.func.now()
                )
                db.session.add(execution)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–æ–Ω–∞
                law = Law.query.get(result['law_id'])
                if law:
                    law.execution_count += 1
                    law.last_executed = db.func.now()

            db.session.commit()
            print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–æ–Ω–æ–≤. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–æ–Ω–æ–≤: {e}")
            db.session.rollback()


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def integrate_laws_with_actions():
    """–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω–æ–≤ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    # –ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è—Ö:

    # –í views/polls.py –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:
    # from flask import current_app
    # results = current_app.trigger_laws(current_user.id, 'vote', {'poll_id': poll.id})
    # for result in results:
    #     if result['success'] and result['result'].get('action') == 'deny':
    #         flash(result['result'].get('reason', '–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∑–∞–∫–æ–Ω–æ–º'), 'error')
    #         return redirect(url_for('polls.poll_detail', poll_id=poll.id))

    # –í views/parties.py –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏:
    # results = current_app.trigger_laws(current_user.id, 'create_party', {
    #     'party_name': form.name.data,
    #     'founding_members': [current_user.id]
    # })
    # for result in results:
    #     if result['success'] and result['result'].get('action') == 'deny':
    #         flash(result['result'].get('reason'), 'error')
    #         return render_template('parties/create.html', form=form)

    # –í views/users.py –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
    # results = current_app.trigger_laws(None, 'user_register', {
    #     'username': form.username.data,
    #     'timestamp': datetime.utcnow()
    # })

    pass


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–∫–æ–Ω–æ–≤
class LawConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–æ–Ω–æ–≤"""

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    MAX_EXECUTION_TIME = 10

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–æ–Ω–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –∑–∞ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ
    MAX_LAWS_PER_ACTION = 20

    # –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    DETAILED_LOGGING = True

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–∫–æ–Ω–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    AUTO_DEACTIVATE_ON_ERROR = True

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ –¥–ª—è –∞–≤—Ç–æ–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    ERROR_THRESHOLD = 5


def apply_law_config(app):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–æ–Ω–æ–≤"""

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if not hasattr(app, 'law_config'):
        app.law_config = LawConfig()

    # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Flask
    app.law_config.MAX_EXECUTION_TIME = app.config.get('LAW_MAX_EXECUTION_TIME', 10)
    app.law_config.MAX_LAWS_PER_ACTION = app.config.get('LAW_MAX_LAWS_PER_ACTION', 20)
    app.law_config.DETAILED_LOGGING = app.config.get('LAW_DETAILED_LOGGING', True)


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def create_app():
    app = Flask(__name__, instance_relative_config=True)
    app.config.from_pyfile('config.py')

    db.init_app(app)
    migrate.init_app(app, db)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–æ–Ω–æ–≤
    init_law_system(app, db)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–∫–æ–Ω–æ–≤
    apply_law_config(app)

    login_manager.init_app(app)
    login_manager.login_view = 'users.login'

    from .views import main, users, parties, polls, laws, news
    app.register_blueprint(main.bp)
    app.register_blueprint(users.bp)
    app.register_blueprint(parties.bp)
    app.register_blueprint(polls.bp)
    app.register_blueprint(laws.bp)
    app.register_blueprint(news.bp)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—É–∫–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤
    register_law_hooks(app)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    init_additional_components(app)

    return app
