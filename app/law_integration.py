# law_integration.py - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω–æ–≤ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è

from flask import current_app, flash, request
from flask_login import current_user
from functools import wraps
from datetime import datetime
from typing import Dict, List, Any, Optional, Callable
import json


class LawIntegrationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω–æ–≤"""
    pass


def check_laws(action: str, data: Dict = None, user_id: int = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–æ–Ω–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    @check_laws('vote', {'poll_id': 123})
    def vote_function():
        # –í–∞—à –∫–æ–¥
    """

    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            uid = user_id if user_id is not None else (current_user.id if current_user.is_authenticated else None)

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ kwargs –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            law_data = data or {}
            if not law_data and kwargs:
                law_data = kwargs.copy()

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–∫–æ–Ω–æ–≤
            if hasattr(current_app, 'trigger_laws'):
                try:
                    results = current_app.trigger_laws(uid, action, law_data)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for result in results:
                        if result.get('success') and result.get('result'):
                            law_result = result['result']

                            if law_result.get('action') == 'deny':
                                reason = law_result.get('reason', '–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∑–∞–∫–æ–Ω–æ–º')
                                flash(f"‚ùå {reason}", 'error')
                                raise LawIntegrationError(reason)

                            elif law_result.get('action') == 'modify':
                                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫ kwargs
                                changes = law_result.get('changes', {})
                                kwargs.update(changes)
                                flash("üîÑ –î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–∫–æ–Ω–∞–º", 'info')

                            elif law_result.get('action') == 'info':
                                message = law_result.get('message', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–æ–Ω–æ–≤')
                                flash(f"‚ÑπÔ∏è {message}", 'info')

                except LawIntegrationError:
                    raise
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–æ–Ω–æ–≤: {e}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return func(*args, **kwargs)

        return wrapper

    return decorator


class LawChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–æ–Ω–æ–≤ –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤"""

    @staticmethod
    def check(action: str, data: Dict = None, user_id: int = None) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–æ–Ω—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        {
            'allowed': bool,
            'reason': str,
            'modifications': dict,
            'info_messages': list
        }
        """
        uid = user_id if user_id is not None else (current_user.id if current_user.is_authenticated else None)
        law_data = data or {}

        result = {
            'allowed': True,
            'reason': None,
            'modifications': {},
            'info_messages': []
        }

        if not hasattr(current_app, 'trigger_laws'):
            return result

        try:
            results = current_app.trigger_laws(uid, action, law_data)

            for law_result in results:
                if law_result.get('success') and law_result.get('result'):
                    lr = law_result['result']

                    if lr.get('action') == 'deny':
                        result['allowed'] = False
                        result['reason'] = lr.get('reason', '–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∑–∞–∫–æ–Ω–æ–º')
                        break

                    elif lr.get('action') == 'modify':
                        changes = lr.get('changes', {})
                        result['modifications'].update(changes)

                    elif lr.get('action') == 'info':
                        message = lr.get('message', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–æ–Ω–æ–≤')
                        result['info_messages'].append(message)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–æ–Ω–æ–≤: {e}")

        return result

    @staticmethod
    def flash_results(check_result: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ flash —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not check_result['allowed']:
            flash(f"‚ùå {check_result['reason']}", 'error')

        if check_result['modifications']:
            flash("üîÑ –î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–∫–æ–Ω–∞–º", 'info')

        for message in check_result['info_messages']:
            flash(f"‚ÑπÔ∏è {message}", 'info')


# –ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π

# ============================================================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ì–û–õ–û–°–û–í–ê–ù–ò–ï–ú
# ============================================================================

def integrate_voting_laws():
    """
    –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ polls/views.py:

    from .law_integration import LawChecker

    @bp.route('/<int:poll_id>/vote', methods=['GET', 'POST'])
    @login_required
    def vote(poll_id):
        poll = Poll.query.get_or_404(poll_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–æ–Ω–æ–≤
        law_check = LawChecker.check('vote', {
            'poll_id': poll_id,
            'poll_type': poll.type,
            'user_party_id': current_user.party_id
        })

        if not law_check['allowed']:
            LawChecker.flash_results(law_check)
            return redirect(url_for('polls.poll_detail', poll_id=poll_id))

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if law_check['modifications']:
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫–æ–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å –≥–æ–ª–æ—Å–∞
            vote_weight = law_check['modifications'].get('vote_weight', 1)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        LawChecker.flash_results(law_check)

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...
    """
    pass


# ============================================================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ü–ê–†–¢–ò–Ø–ú–ò
# ============================================================================

def integrate_party_laws():
    """
    –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ parties/views.py:

    @bp.route('/create', methods=['GET', 'POST'])
    @login_required
    def create_party():
        form = CreatePartyForm()

        if form.validate_on_submit():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–æ–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏
            law_check = LawChecker.check('create_party', {
                'party_name': form.name.data,
                'founding_members': [current_user.id],
                'creator_id': current_user.id
            })

            if not law_check['allowed']:
                LawChecker.flash_results(law_check)
                return render_template('parties/create.html', form=form)

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ —Å —É—á–µ—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
            party_data = {
                'name': form.name.data,
                'leader_id': current_user.id
            }

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç –∑–∞–∫–æ–Ω–æ–≤
            party_data.update(law_check['modifications'])

            party = Party(**party_data)
            db.session.add(party)
            db.session.commit()

            LawChecker.flash_results(law_check)
            return redirect(url_for('parties.party_profile', party_id=party.id))
    """
    pass


# ============================================================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
# ============================================================================

def integrate_user_laws():
    """
    –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ users/views.py:

    @bp.route('/register', methods=['GET', 'POST'])
    def register():
        form = RegisterForm()

        if form.validate_on_submit():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            law_check = LawChecker.check('user_register', {
                'username': form.username.data,
                'timestamp': datetime.utcnow(),
                'ip_address': request.remote_addr
            })

            if not law_check['allowed']:
                LawChecker.flash_results(law_check)
                return render_template('users/register.html', form=form)

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏
            user_data = {
                'username': form.username.data,
                'password': generate_password_hash(form.password.data)
            }

            # –ó–∞–∫–æ–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            user_data.update(law_check['modifications'])

            user = User(**user_data)
            db.session.add(user)
            db.session.commit()

            LawChecker.flash_results(law_check)
            return redirect(url_for('users.login'))
    """
    pass


# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

def get_user_permissions(user_id: int) -> Dict[str, bool]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤
    """
    permissions = {
        'can_vote': True,
        'can_create_party': True,
        'can_join_party': True,
        'can_create_poll': True,
        'can_run_for_leader': True
    }

    if not hasattr(current_app, 'trigger_laws'):
        return permissions

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    for permission, default_value in permissions.items():
        try:
            action = permission.replace('can_', '')
            results = current_app.trigger_laws(user_id, f'check_{action}', {'permission_check': True})

            for result in results:
                if result.get('success') and result.get('result'):
                    lr = result['result']
                    if lr.get('action') == 'deny':
                        permissions[permission] = False
                        break
        except:
            continue

    return permissions


def validate_law_triggers(triggers: List[Dict]) -> bool:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∑–∞–∫–æ–Ω–∞
    """
    valid_trigger_types = ['action', 'time', 'conditional']
    valid_schedules = ['daily', 'weekly', 'monthly']

    for trigger in triggers:
        if not isinstance(trigger, dict):
            return False

        trigger_type = trigger.get('type')
        if trigger_type not in valid_trigger_types:
            return False

        if trigger_type == 'action':
            actions = trigger.get('actions', [])
            if not isinstance(actions, list) or not actions:
                return False

        elif trigger_type == 'time':
            schedule = trigger.get('schedule')
            if schedule not in valid_schedules:
                return False

    return True


class LawExecutionTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

    def __init__(self):
        self.executions = []

    def track_execution(self, law_id: int, result: Dict):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞"""
        execution_data = {
            'law_id': law_id,
            'timestamp': datetime.utcnow(),
            'result': result,
            'success': result.get('success', False)
        }

        self.executions.append(execution_data)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.executions) > 1000:
            self.executions = self.executions[-500:]

    def get_recent_executions(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤"""
        return self.executions[-limit:]

    def get_law_statistics(self, law_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞"""
        law_executions = [e for e in self.executions if e['law_id'] == law_id]

        if not law_executions:
            return {'total': 0, 'successful': 0, 'failed': 0, 'success_rate': 0}

        total = len(law_executions)
        successful = sum(1 for e in law_executions if e['success'])
        failed = total - successful
        success_rate = (successful / total * 100) if total > 0 else 0

        return {
            'total': total,
            'successful': successful,
            'failed': failed,
            'success_rate': round(success_rate, 2)
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
execution_tracker = LawExecutionTracker()


def init_law_integration(app):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∑–∞–∫–æ–Ω–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.law_execution_tracker = execution_tracker

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    original_trigger = getattr(app, 'trigger_laws', None)

    if original_trigger:
        def tracked_trigger_laws(user_id, action, data=None):
            results = original_trigger(user_id, action, data)

            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            for result in results:
                execution_tracker.track_execution(result.get('law_id'), result)

            return results

        app.trigger_laws = tracked_trigger_laws

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤
    @app.template_global()
    def get_user_permissions_template(user_id):
        return get_user_permissions(user_id)

    @app.template_global()
    def check_law_permission(action, user_id=None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–∫–æ–Ω—ã –≤ —à–∞–±–ª–æ–Ω–µ"""
        uid = user_id if user_id is not None else (current_user.id if current_user.is_authenticated else None)

        if not uid:
            return False

        check_result = LawChecker.check(f'check_{action}', {'permission_check': True}, uid)
        return check_result['allowed']

    print("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")